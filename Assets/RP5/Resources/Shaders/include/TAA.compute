// defines
#include "../Shaders/include/common.hlsl"

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel TAA

Texture2D<float4> history_color_tex;
RWTexture2D<float4> color_tex; // color tex
Texture2D<float2> mv_tex; // motion vector
Texture2D<float2> depth_tex; // motion vector
uint width;
uint height;


[numthreads(FULL_SCREEN_CS_THREAD_X, FULL_SCREEN_CS_THREAD_Y, FULL_SCREEN_CS_THREAD_Z)] 
void TAA(uint3 id : SV_DispatchThreadID)
{
    
    float3 color = color_tex.Load(id).rgb;
    float2 mv = mv_tex.Load(id).rg * float2(width, height);
    uint3 prev_pos = id - uint3(mv.x, mv.y, 0);
    float3 history_color = history_color_tex.Load(prev_pos).rgb;
    // float depth = depth_stencil_tex.Load(id).r;
    // float2 uv = (float2(id.xy) + 0.5) / float2(width, height);
    // uv = uv * 2.0 - 1.0;
    // float4 clipPos = float4(uv.x, uv.y, depth, 1.0);
    // clipPos.y = -clipPos.y;
    // float4 worldPos = mul(inverse_view_projection, clipPos);
    // worldPos.xyz /= worldPos.w;
    float3 c0 = color_tex.Load(id + uint3(1, 0,0)).xyz;
    float3 c1 = color_tex.Load(id + uint3(-1, 0,0)).xyz;
    float3 c2 = color_tex.Load(id + uint3(0, 1,0)).xyz;
    float3 c3 = color_tex.Load(id + uint3(0, -1,0)).xyz;
    
    float3 c_min = min(color, min(c0, min(c1, min(c2, c3))));
    float3 c_max = max(color, max(c0, max(c1, max(c2, c3))));;
    
    //history_color = clamp(history_color, c_min, c_max);

    // Karis, Brian. "High-quality temporal supersampling, result blur
    float w0 = Luminance(history_color) * (1.0 - 0.05);
    float w1 = Luminance(color) * 0.05;
    float w = w1 / (w0 + w1);

    float4 final_color = float4((1.0 - w) * history_color + w * color, 1.0);
	color_tex[id.xy] = final_color; 
    //color_tex[id.xy] = float4(color, 1.0);
}
