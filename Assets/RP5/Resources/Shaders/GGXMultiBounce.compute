// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "UnityCG.cginc"
#include "Lighting.cginc"
#include "AutoLight.cginc"
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float> Result;

float Vis_SmithGGXCombined(float a2, float NoV, float NoL) {
	float Vis_SmithV = NoL * sqrt(NoV * (NoV - NoV * a2) + a2);
	float Vis_SmithL = NoV * sqrt(NoL * (NoL - NoL * a2) + a2);
	return 0.5 / (Vis_SmithV + Vis_SmithL);
}

float NDF_GGX(float a2, float NoM) {
	float d = (NoM * a2 - NoM) * NoM + 1.0;
	return a2 * UNITY_INV_PI / (d * d);
}

float2 Hammersley(uint i, uint N) { // 0-1
    uint bits = (i << 16u) | (i >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    float rdi = float(bits) * 2.3283064365386963e-10;
    return float2(float(i) / float(N), rdi);
}


float3 ImportanceSampleGGX(float2 Xi, float3 N, float a2) {
    //TODO: in spherical space - Bonus 1
    float theta = atan(a2 * sqrt(Xi.x) / sqrt(1.0f - Xi.x));
    float phi = 2.0 * UNITY_PI * Xi.y;


    //TODO: from spherical space to cartesian space - Bonus 1
    float sinTheta = sin(theta);
    float consTheta = cos(theta);
    float3 H = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, consTheta);

    //TODO: tangent coordinates - Bonus 1
    float3 up = abs(N.z) < 0.999 ? float3(0.0, 0.0, 1.0) : float3(1.0, 0.0, 0.0);
    float3 tangent = normalize(cross(up, N));
    float3 bitangent = cross(N, tangent);

    //TODO: transform H to tangent space - Bonus 1
    float3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}


// mu = sin(theta), cos(theta) = nol
float IsotropicReflection(float mu, float a2) {    
const int sample_count = 1024;
    float3 Emu = float3(0.0, 0.0, 0.0);
    float3 N = float3(0.0, 1.0, 0.0);
    const float3 V = float3(sqrt(1 - mu * mu), 0, mu);
    for (int i = 0; i < sample_count; i++) {
        float2 Xi = Hammersley(i, sample_count);
        float3 H = ImportanceSampleGGX(Xi, N, a2);
        float3 L = normalize(H * 2.0f * dot(V, H) - V);

        float NoL = max(L.z, 0.0f);
        float NoH = max(H.z, 0.0f);
        float VoH = max(dot(V, H), 0.0f);
        float NoV = max(dot(N, V), 0.0f);
        // Edit Start
        // TODO: To calculate (fr * ni) / p_o here - Bonus 1
        float G = Vis_SmithGGXCombined(a2, NoV, NoL);
        float weight = VoH * G / (NoV * NoH);
        Emu += float3(1.0, 1.0, 1.0) * weight;

        // Split Sum - Bonus 2
    }
    return Emu / sample_count;

}

[numthreads(32,32, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    id.xy;
    float mu = float(id.x) / 31;
    float roughness = float(id.y) / 31;
	float a2 = roughness * roughness * roughness * roughness;
	
	float reflected = IsotropicReflection(mu, a2);
	// 1 - e
	float reflected_ms = 1 - reflected;
    Result[id.xy] = float4(reflected_ms, 0.0, 0.0, 0.0);
}
